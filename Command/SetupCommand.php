<?php

namespace Orkestra\Bundles\SetupBundle\Command;

use Orkestra\Bundles\SetupBundle\Mergers\Traits\CopyTrait;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Exception\LogicException;
use Symfony\Component\Console\Helper\ProcessHelper;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;

abstract class SetupCommand extends ContainerAwareCommand
{
    use CopyTrait;

    /**
     * @var bool
     */
    private $markAllForCopy = false;
    /**
     * @var string[]
     */
    private $markedForCopy = [];
    /**
     * @var string
     */
    private $mergeName;
    /**
     * @var string[]
     */
    private $composerPackages = [];
    /**
     * @var string[]
     */
    private $nodePackages = [];

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return void
     */
    abstract protected function preExecute(InputInterface $input, OutputInterface $output);

    final public function setName($name)
    {
        $ret = preg_match('/^[a-z-_]+$/', $name);
        if ($ret !== 1) {
            throw new LogicException('Your command name can only contain lowercase letters, underscores and dashes.');
        }
        $this->mergeName = $name;
        return parent::setName(sprintf('setup:%s', $name)); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $relativePath
     * @return bool
     */
    final private function isMarkedForCopy(string $relativePath)
    {
        return $this->markAllForCopy ? true : array_key_exists($relativePath, $this->markedForCopy);
    }

    /**
     * By default when a file doesn't exist in the destination project it will simply be ignored.
     * This method allows a command to force all files to be copied when they don't exist.
     *
     * @return $this
     */
    final protected function markAllForCopy()
    {
        $this->markAllForCopy = true;
        return $this;
    }

    /**
     * By default when a file doesn't exist in the destination project it will simply be ignored.
     * This method allows a command to force it to be copied when it doesn't exist.
     *
     * @param string $relativePath
     * @param string|null $destinationName
     * @return $this
     */
    final protected function markForCopy(string $relativePath, string $destinationName = null)
    {
        $this->markedForCopy[$relativePath] = empty($destinationName) ? $relativePath : $destinationName;
        return $this;
    }

    /**
     * Installs a Composer package when executing the command.
     *
     * @param string $package
     * @param bool $dev
     * @param string|null $version
     * @return $this
     */
    final protected function addComposerPackage(string $package, bool $dev = false, string $version = null)
    {
        $this->composerPackages[$package] = [$version, $dev];
        return $this;
    }

    /**
     * @param string $package
     * @param bool $dev
     * @param string|null $version
     * @return $this
     */
    final protected function addNodePackage(string $package, bool $dev = false, string $version = null)
    {
        $this->nodePackages[$package] = [$version, $dev];
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    final protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->preExecute($input, $output);

        $kernel = $this->getContainer()->get('kernel');
        $projectDir = $this->getContainer()->getParameter('kernel.project_dir');
        $sourcePath = $kernel->locateResource(
            sprintf('@OrkestraSetupBundle/Resources/merges/%s', $this->mergeName)
        );
        if (!is_dir($sourcePath)) {
            throw new LogicException('No files found for the "%s" merge.', $this->mergeName);
        }

        // Process all merge files
        $finder = new Finder();
        $finder->files()->ignoreDotFiles(false)->in($sourcePath);
        foreach($finder as $file) {
            $relativePath = str_replace('\\', '/', $file->getRelativePathname());
            $source = $file->getPathname();
            $destination = array_key_exists($relativePath, $this->markedForCopy)
                ? $this->markedForCopy[$relativePath] : $relativePath;
            $destination = $projectDir . '/' . $destination;
            switch($file->getExtension()) {
                case 'gitignore':
                case 'nanoignore':
                    $this->getContainer()->get('orkestra.setup.merger.line')
                        ->setComment(sprintf('%s merger', $this->mergeName))
                        ->merge($source, $destination, $this->isMarkedForCopy($relativePath));
                    break;
                case 'json':
                    $this->getContainer()->get('orkestra.setup.merger.json')
                        ->merge($source, $destination, $this->isMarkedForCopy($relativePath));
                    break;
                case 'yml':
                case 'yaml':
                    $this->getContainer()->get('orkestra.setup.merger.yaml')
                        ->merge($source, $destination, $this->isMarkedForCopy($relativePath));
                    break;
                default:
                    if ($this->isMarkedForCopy($relativePath)) {
                        $this->copy($source, $destination, true);
                    } else {
                        throw new LogicException('Don\'t know what to do with ' . $relativePath);
                    }
                    break;
            }
        }

        /** @var ProcessHelper $processHelper */
        $processHelper = $this->getHelper('process');
        $processDir = $this->getContainer()->getParameter('kernel.project_dir');
        $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);
        // Install Composer packages
        foreach($this->composerPackages as $package => $options) {
            list($version, $dev) = $options;
            $cmd = 'composer require --no-scripts';
            if ($dev) $cmd .= ' --dev';
            $cmd .= ' ' . $package;
            if (!empty($version)) $cmd .= ':"' . $version . '"';

            $process = (new Process($cmd, $processDir))->setTimeout(3600);
            $processHelper->run($output, $process, null, null, OutputInterface::VERBOSITY_DEBUG);
        }
        // Install Node.js packages
        foreach($this->nodePackages as $package => $options) {
            list($version, $dev) = $options;
            $cmd = 'yarn add';
            if ($dev) $cmd .= ' --dev';
            $cmd .= ' ' . $package;
            if (!empty($version)) $cmd .= '@' . $version;

            $process = (new Process($cmd, $processDir))->setTimeout(3600);
            $processHelper->run($output, $process, null, null, OutputInterface::VERBOSITY_DEBUG);
        }
    }
}
